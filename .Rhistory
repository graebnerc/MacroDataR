wb_raw_data <- data.table::fread(wb_file_name)
}
}
wb_data <- wb_raw_data[, res_rents:=ny.gdp.totl.rt.zs
][, iso2c:=countrycode::countrycode(iso2c, "iso2c", "iso3c")
][, .(iso2c, year,res_rents)]
head(wb_data)
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
devtools::session_info()
help(use_package)
help(unzip)
# Gini data from Solt==========================================================
swiid_link <- "https://dataverse.harvard.edu/api/access/datafile/3376371"
tmp <- tempfile(fileext = ".zip")
download.file(download_link, tmp,
quiet = TRUE)
download.file(swiid_link, tmp,
quiet = TRUE)
swiid_raw <- data.table::fread(unzip(tmp, files = "swiid8_0_summary.csv"))
tmp
swiid_raw <- data.table::fread(tmp)
unzip(tmp, exdir = "data-raw", files = "swiid8_0_summary.csv")
swiid_raw <- data.table::fread(unzip(tmp, files = "swiid8_0/swiid8_0_summary.csv"))
unzip(tmp, exdir = "data-raw", files = "swiid8_0_summary.csv", list = T)
unzip(tmp, exdir = "data-raw", files = "swiid8_0/swiid8_0_summary.csv")
swiid_raw <- data.table::fread(unzip(tmp, files = "data-raw/swiid8_0_summary.csv"))
swiid_raw <- data.table::fread("data-raw/swiid8_0_summary.csv")
getwd()
swiid_raw <- data.table::fread("data-raw/swiid8_0/swiid8_0_summary.csv")
head(swiid_raw)
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(country, "country.name", "iso3c")]
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
swiid_raw <- data.table::fread("data-raw/swiid8_0/swiid8_0_summary.csv")
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
head(swiid_raw)
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
swiid_file <- "data-raw/swiid8_0_summary.csv"
swiid_raw <- data.table::fread("data-raw/swiid8_0_summary.csv")
file.rename("swiid8_0/swiid8_0_summary.csv", swiid_file)
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
swiid_origin_zip_file
strsplit(swiid_origin_zip_file, "/")
strsplit(swiid_origin_zip_file, "/")[[1]]
strsplit(swiid_origin_zip_file, "/")[[1]][[1]]
unlink(strsplit(swiid_origin_zip_file, "/")[[1]][[1]], recursive = T)
strsplit(swiid_origin_zip_file, "/")[[1]][[1]]
unlink(strsplit(swiid_origin_zip_file, "/")[[1]][[1]], recursive = T)
x <- unlink(strsplit(swiid_origin_zip_file, "/")[[1]][[1]], recursive = T)
x
help("unlink")
unlink(paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]], recursive = T)
swiid_raw <- data.table::fread(swiid_file)
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(country, year,
gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
}
unlink(paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]], recursive = T))
paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]]
)
unlink(paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]]), recursive = T)
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
swiid_link <- "https://dataverse.harvard.edu/api/access/datafile/3376371"
swiid_file <- "data-raw/swiid8_0_summary.csv"
swiid_origin_zip_file <- "swiid8_0/swiid8_0_summary.csv"
if (!update_data & file.exists(swiid_file)){
swiid_raw <- data.table::fread(swiid_file)
} else {
tmp <- tempfile(fileext = ".zip")
download.file(swiid_link, tmp,
quiet = FALSE)
unzip(tmp, exdir = "data-raw", files = swiid_origin_zip_file)
file.rename(swiid_origin_zip_file, swiid_file)
unlink(paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]]),
recursive = T)
swiid_raw <- data.table::fread(swiid_file)
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(country, year,
gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
data.table::fwrite(swiid_raw, swiid_file)
}
tmp
unzip(tmp, exdir = "data-raw", files = swiid_origin_zip_file)
file.rename(swiid_origin_zip_file, swiid_file)
file.rename(paste0("data-raw", swiid_origin_zip_file), swiid_file)
file.rename(paste0("data-raw/", swiid_origin_zip_file), swiid_file)
unlink(paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]]),
recursive = T)
swiid_raw <- data.table::fread(swiid_file)
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(country, year,
gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
swiid_link <- "https://dataverse.harvard.edu/api/access/datafile/3376371"
swiid_file <- "data-raw/swiid8_0_summary.csv"
swiid_origin_zip_file <- "swiid8_0/swiid8_0_summary.csv"
if (!update_data & file.exists(swiid_file)){
swiid_raw <- data.table::fread(swiid_file)
} else {
tmp <- tempfile(fileext = ".zip")
download.file(swiid_link, tmp,
quiet = FALSE)
unzip(tmp, exdir = "data-raw", files = swiid_origin_zip_file)
file.rename(paste0("data-raw/", swiid_origin_zip_file), swiid_file)
unlink(paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]]),
recursive = T)
swiid_raw <- data.table::fread(swiid_file)
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(country, year,
gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
data.table::fwrite(swiid_raw, swiid_file)
swiid_link <- "https://dataverse.harvard.edu/api/access/datafile/3376371"
swiid_file <- "data-raw/swiid8_0_summary.csv"
swiid_origin_zip_file <- "swiid8_0/swiid8_0_summary.csv"
if (!update_data & file.exists(swiid_file)){
swiid_raw <- data.table::fread(swiid_file)
} else {
tmp <- tempfile(fileext = ".zip")
download.file(swiid_link, tmp,
quiet = FALSE)
unzip(tmp, exdir = "data-raw", files = swiid_origin_zip_file)
file.rename(paste0("data-raw/", swiid_origin_zip_file), swiid_file)
unlink(paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]]),
recursive = T)
swiid_raw <- data.table::fread(swiid_file)
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(country, year,
gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
data.table::fwrite(swiid_raw, swiid_file)
}
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
swiid_file
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
head(wb_data)
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
head(swiid_raw)
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
countries_considered
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
update_data <- F
export_data_source <- "HARV" # "MIT" or "HARV"
countries_considered <- countrycode::countrycode(strsplit(
"LU, SE, FI, DK, FR, NL, BE, SI, DE, AT, LV, EE, SK, CZ, PL, HU, GB, IE, PT, GR, ES, IT",
", ")[[1]], "iso2c", "iso3c")
# World Bank data==============================================================
# Natural resource rents
# https://data.worldbank.org/indicator/ny.gdp.totl.rt.zs
wb_file_name <- "data-raw/wb_data.csv"
if (update_data){
wb_raw_data <- data.table::as.data.table(
WDI::WDI(country = countrycode::countrycode(countries_considered,
"iso3c", "iso2c"),
indicator = "ny.gdp.totl.rt.zs",
start = 1962, end = 2016)
)
data.table::fwrite(wb_raw_data, wb_file_name)
} else {# TODO Test whether file exists
if (!file.exists(wb_file_name)){
warning("File for world bank data does not exist. Download from www...")
wb_raw_data <- data.table::as.data.table(
WDI::WDI(country = countries_considered,
indicator = "ny.gdp.totl.rt.zs",
start = 1962, end = 2016)
)
data.table::fwrite(wb_raw_data, wb_file_name)
} else {
wb_raw_data <- data.table::fread(wb_file_name)
}
}
wb_data <- wb_raw_data[, res_rents:=ny.gdp.totl.rt.zs
][, iso3c:=countrycode::countrycode(iso2c,
"iso2c", "iso3c")
][, .(iso3c, year,res_rents)]
# Gini data from Solt==========================================================
swiid_link <- "https://dataverse.harvard.edu/api/access/datafile/3376371"
swiid_file <- "data-raw/swiid8_0_summary.csv"
swiid_origin_zip_file <- "swiid8_0/swiid8_0_summary.csv"
if (!update_data & file.exists(swiid_file)){
swiid_raw <- data.table::fread(swiid_file)
} else {
tmp <- tempfile(fileext = ".zip")
download.file(swiid_link, tmp,
quiet = FALSE)
unzip(tmp, exdir = "data-raw", files = swiid_origin_zip_file)
file.rename(paste0("data-raw/", swiid_origin_zip_file), swiid_file)
unlink(paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]]),
recursive = T)
swiid_raw <- data.table::fread(swiid_file)
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(iso3c=country, year,
gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
data.table::fwrite(swiid_raw, swiid_file)
}
# Merge data===================================================================
swiid_raw
wb_data
data.table::merge
data.table::merge.data.table
data.table::merge
methods(generic.function="merge")
merge
merge.data.table
# Merge data===================================================================
macro_data <- Reduce(function(x,y) merge(x = x, y = y, by = c("iso3c", "year")),
list(wb_data, swiid_raw))
q
head(wb_data)
head(swiid_raw)
swiid_raw <- data.table::fread(swiid_file)
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(iso3c=country, year,
gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
data.table::fwrite(swiid_raw, swiid_file)
swiid_raw <- data.table::fread(swiid_file)
head(swiid_raw)
data.table::fread(swiid_file)
tmp <- tempfile(fileext = ".zip")
download.file(swiid_link, tmp,
quiet = FALSE)
unzip(tmp, exdir = "data-raw", files = swiid_origin_zip_file)
file.rename(paste0("data-raw/", swiid_origin_zip_file), swiid_file)
unlink(paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]]),
recursive = T)
swiid_raw <- data.table::fread(swiid_file)
swiid_raw
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(iso3c=country, year,
gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
swiid_raw
# Merge data===================================================================
macro_data <- Reduce(function(x,y) merge(x = x, y = y, by = c("iso3c", "year")),
list(wb_data, swiid_raw))
macro_data
# Merge data===================================================================
macro_data <- Reduce(function(...) merge(..., all=TRUE, by = c("iso3c", "year")),
list(wb_data, swiid_raw))
macro_data
unique(macro_data, by = c("iso3c". "year"))
unique(macro_data, by = c("iso3c", "year"))
dplyr::anti_join(macro_data, unique(macro_data, by = c("iso3c", "year")))
dplyr::anti_join(unique(macro_data, by = c("iso3c", "year")), macro_data)
View(swiid_raw)
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/wb_data.R')
update_data <- T
export_data_source <- "HARV" # "MIT" or "HARV"
countries_considered <- countrycode::countrycode(strsplit(
"LU, SE, FI, DK, FR, NL, BE, SI, DE, AT, LV, EE, SK, CZ, PL, HU, GB, IE, PT, GR, ES, IT",
", ")[[1]], "iso2c", "iso3c")
# World Bank data==============================================================
# Natural resource rents
# https://data.worldbank.org/indicator/ny.gdp.totl.rt.zs
wb_file_name <- "data-raw/wb_data.csv"
if (update_data){
wb_raw_data <- data.table::as.data.table(
WDI::WDI(country = countrycode::countrycode(countries_considered,
"iso3c", "iso2c"),
indicator = "ny.gdp.totl.rt.zs",
start = 1962, end = 2016)
)
data.table::fwrite(wb_raw_data, wb_file_name)
} else {# TODO Test whether file exists
if (!file.exists(wb_file_name)){
warning("File for world bank data does not exist. Download from www...")
wb_raw_data <- data.table::as.data.table(
WDI::WDI(country = countries_considered,
indicator = "ny.gdp.totl.rt.zs",
start = 1962, end = 2016)
)
data.table::fwrite(wb_raw_data, wb_file_name)
} else {
wb_raw_data <- data.table::fread(wb_file_name)
}
}
wb_data <- wb_raw_data[, res_rents:=ny.gdp.totl.rt.zs
][, iso3c:=countrycode::countrycode(iso2c,
"iso2c", "iso3c")
][, .(iso3c, year,res_rents)]
# Gini data from Solt==========================================================
swiid_link <- "https://dataverse.harvard.edu/api/access/datafile/3376371"
swiid_file <- "data-raw/swiid8_0_summary.csv"
swiid_origin_zip_file <- "swiid8_0/swiid8_0_summary.csv"
if (!update_data & file.exists(swiid_file)){
swiid_raw <- data.table::fread(swiid_file)
} else {
tmp <- tempfile(fileext = ".zip")
download.file(swiid_link, tmp,
quiet = FALSE)
unzip(tmp, exdir = "data-raw", files = swiid_origin_zip_file)
file.rename(paste0("data-raw/", swiid_origin_zip_file), swiid_file)
unlink(paste0("data-raw/", strsplit(swiid_origin_zip_file, "/")[[1]][[1]]),
recursive = T)
swiid_raw <- data.table::fread(swiid_file)
swiid_raw <- swiid_raw[, country:=countrycode::countrycode(
country, "country.name", "iso3c"
)][!is.na(country), .(iso3c=country, year,
gini_post_tax=gini_disp, gini_pre_tax=gini_mkt)]
swiid_raw <- unique(swiid_raw, by = c("iso3c", "year"))
data.table::fwrite(swiid_raw, swiid_file)
}
# Merge data===================================================================
macro_data <- Reduce(function(...) merge(..., all=TRUE, by = c("iso3c", "year")),
list(wb_data, swiid_raw))
save(macro_data, file = "data/macro_data.rdata")
data.table::fwrite(macro_data, file = "data/macro_data.csv")
usethis::use_data(macro_data)
head(macro_data)
devtools::document()
#' @import data.table
#' update_data <- T
export_data_source <- "HARV" # "MIT" or "HARV"
devtools::document()
devtools::document()
help(update_data)
help(macro_data)
help("macro_data")
library(MacroDataR)
rm(list=ls())
library(MacroDataR)
data("macro_data")
head(macro_data)
View(macro_data)
help("macro_data")
help(wb_data)
help("wb_data")
devtools::document()
help("wb_data")
devtools::use_vignette("my-vignette")
usethis::use_vignette()
usethis::use_vignette("my-vignette")
usethis::use_vignette("my-vignette")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
macro_data_descriptives <- macro_data %>%
dplyr::gather(variable, value)
library(tidyverse)
library(knitr)
library(MacroDataR)
macro_data_descriptives <- macro_data %>%
dplyr::gather(variable, value)
macro_data_descriptives <- macro_data %>%
tidyr::gather(variable, value)
macro_data_descriptives
head(macro_data)
macro_data_descriptives <- macro_data %>%
tidyr::gather(variable, value, -iso3c, -year)
macro_data_descriptives
macro_data_descriptives <- macro_data %>%
tidyr::gather(variable, value, -iso3c, -year) %>%
group_by(variable) %>%
summarise(mean=mean(value, na.rm=T),
sd=sd(value, na.rm=T),
obs=n()) %>%
ungroup()
macro_data_descriptives
exists("update_data")
devtools::document()
library(MacroDataR)
#'
#' \code{update_data} function updates the data.
#'
#'  \code{update_data} function updates the data set. To function properly it
#'  requires access to the internet. The data can also be updated selectively.
#'
#' @param vars Specifies the variables to be updated as strings. Default is all.
#' @return Returns the updated data set.
#' TODO: Maybe only information?
#' @export
update_data <- function(update_full=FALSE, vars="all") {
print("Updating data...")
update_data <- update_full
source("R/macro_data.R")
print("...complete!")
}
devtools::document()
devtools::document()
exists("update_data")
!exists("update_data")
if (!exists("update_data")){
update_data <- F
}
#' @import data.table
if (!exists("update_data")){
update_data <- FALSE
}
export_data_source <- "HARV" # "MIT" or "HARV"
countries_considered <- countrycode::countrycode(strsplit(
"LU, SE, FI, DK, FR, NL, BE, SI, DE, AT, LV, EE, SK, CZ, PL, HU, GB, IE, PT, GR, ES, IT",
", ")[[1]], "iso2c", "iso3c")
# World Bank data==============================================================
# Natural resource rents
# https://data.worldbank.org/indicator/ny.gdp.totl.rt.zs
wb_file_name <- "data-raw/wb_data.csv"
if (update_data){
wb_raw_data <- data.table::as.data.table(
WDI::WDI(country = countrycode::countrycode(countries_considered,
"iso3c", "iso2c"),
indicator = "ny.gdp.totl.rt.zs",
start = 1962, end = 2016)
)
data.table::fwrite(wb_raw_data, wb_file_name)
} else {# TODO Test whether file exists
if (!file.exists(wb_file_name)){
warning("File for world bank data does not exist. Download from www...")
wb_raw_data <- data.table::as.data.table(
WDI::WDI(country = countries_considered,
indicator = "ny.gdp.totl.rt.zs",
start = 1962, end = 2016)
)
data.table::fwrite(wb_raw_data, wb_file_name)
} else {
wb_raw_data <- data.table::fread(wb_file_name)
}
}
wb_data <- wb_raw_data[, res_rents:=ny.gdp.totl.rt.zs
][, iso3c:=countrycode::countrycode(iso2c,
"iso2c", "iso3c")
][, .(iso3c, year,res_rents)]
#' @import data.table
if (!exists("update_data")){
update_data <- FALSE
}
#' @import data.table
if (!exists("update_data")){
update_data <- FALSE
}
update_data
#'
#'  \code{update_data} function updates the data set. To function properly it
#'  requires access to the internet. The data can also be updated selectively.
#'
#' @param updata_full Should all data be downloaded anew (if true), or should
#'     previously downloaded data be used (if false)?
#' @param vars Specifies the variables to be updated as strings. Default is all.
#' @return Returns the updated data set.
#' TODO: Maybe only information?
#' @export
update_data <- function(update_full=FALSE, vars="all") {
print("Updating data...")
download_data <- update_full
source("R/macro_data.R")
print("...complete!")
}
update_data()
update_data(update_full = T)
#'
#'  \code{update_data} function updates the data set. To function properly it
#'  requires access to the internet. The data can also be updated selectively.
#'
#' @param updata_full Should all data be downloaded anew (if true), or should
#'     previously downloaded data be used (if false)?
#' @param vars Specifies the variables to be updated as strings. Default is all.
#' @return Returns the updated data set.
#' TODO: Maybe only information?
#' @export
update_data <- function(update_full=FALSE, vars="all") {
print("Updating data...")
download_data <- update_full
source("R/macro_data.R")
print("...complete!")
}
update_data()
update_data(update_full = T)
download_data
update_data(update_full = TRUE)
download_data
download_data <- TRUE
update_data(update_full = TRUE)
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/update_data.R')
devtools::document()
(!exists("download_data")
)
rm(download_data)
if (!exists("download_data")){
download_data <- FALSE
}
download_data
library(MacroDataR)
source('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/R/update_data.R')
devtools::document()
library(MacroDataR)
update_macro_data
MacroDataR::update_macro_data
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
help("update_macro_data")
help("update_macro_data", package = "MacroDataR")
library(MacroDataR)
usethis::use_vignette("macro_data_info")
devtools::document()
library(MacroDataR)
knit_with_parameters('~/icae-server/ICAE-Projekte-laufend/OeNB17-19_PolEconTrade/Daten/MacroDataR/vignettes/macro_data_info.Rmd')
rmarkdown::render("vignettes/macro_data_info.Rmd")
