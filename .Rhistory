)
][!is.na(COUNTRY) & COUNTRY2 != "DEU"][, COUNTRY:=NULL]
data.table::setnames(ameco10, old = "COUNTRY2", new = "COUNTRY")
ameco10 <- data.table::melt(ameco10,
id.vars=c("COUNTRY"),
variable.name="year",
value.name = "current_account_GDP_ameco")
ameco10 <- rbind(ameco10, ameco10_germany)
ameco10[, current_account_GDP_ameco:=as.double(current_account_GDP_ameco)]
if (sum(duplicated(ameco10, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco10!")
}
# Sectoral balances from AMECO-------------------------------------------------
# Foreign sector:
ameco10_sect_balances <- data.table::fread("data-raw/ameco/AMECO10.TXT.gz",
fill = TRUE, header = TRUE)
ameco10_sect_balances <- ameco10_sect_balances[
TITLE=="Balance on current transactions with the rest of the world (National accounts)" &
UNIT=="(Percentage of gross domestic product at current prices)"
][
!COUNTRY%in%aggregates_2be_eliminated
]
ameco10_sect_balances_germany <-data.table::copy(ameco10_sect_balances)
ameco10_sect_balances_germany <- ameco10_sect_balances_germany[
COUNTRY %in% c("Germany", "West Germany")]
ameco10_sect_balances_germany[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco10_sect_balances_germany <- data.table::melt(
ameco10_sect_balances_germany, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "sect_balance_foreign")
ameco10_sect_balances_germany[, year:=as.double(as.character(year))]
ameco10_sect_balances_germany[COUNTRY=="West Germany" & year>1990, sect_balance_foreign:=NA]
ameco10_sect_balances_germany <- ameco10_sect_balances_germany[, COUNTRY:=countrycode::countrycode(
COUNTRY, "country.name", "iso3c"
)]
ameco10_sect_balances_germany[, sect_balance_foreign:=mean(sect_balance_foreign, na.rm = T), year]
ameco10_sect_balances_germany <- unique(ameco10_sect_balances_germany)
ameco10_sect_balances[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco10_sect_balances <- ameco10_sect_balances[, COUNTRY2:=countrycode::countrycode(COUNTRY, "country.name", "iso3c"
)
][!is.na(COUNTRY) & COUNTRY2 != "DEU"][, COUNTRY:=NULL]
data.table::setnames(ameco10_sect_balances, old = "COUNTRY2", new = "COUNTRY")
ameco10_sect_balances <- data.table::melt(ameco10_sect_balances,
id.vars=c("COUNTRY"),
variable.name="year",
value.name = "sect_balance_foreign")
ameco10_sect_balances <- rbind(ameco10_sect_balances, ameco10_sect_balances_germany)
ameco10_sect_balances[, sect_balance_foreign:=as.double(sect_balance_foreign)]
ameco10_sect_balances[, sect_balance_foreign:=sect_balance_foreign*(-1)]
ameco10_sect_balances[, year:=as.double(as.character(year))]
ameco10_sect_balances <- ameco10_sect_balances[year<=last_year & year>=first_year]
if (sum(duplicated(ameco10_sect_balances, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco10_sect_balances!")
}
# Government sector:
ameco16_sect_balances <- data.table::fread("data-raw/ameco/AMECO16.TXT.gz",
fill = TRUE, header = TRUE)
ameco16_sect_balances <- ameco16_sect_balances[
TITLE=="Net lending (+) or net borrowing (-): general government :- ESA 2010" &
UNIT=="(Percentage of GDP at current prices (excessive deficit procedure))"
][
!COUNTRY%in%aggregates_2be_eliminated
]
ameco16_sect_balances_germany <-data.table::copy(ameco16_sect_balances)
ameco16_sect_balances_germany <- ameco16_sect_balances_germany[
COUNTRY %in% c("Germany", "West Germany")]
ameco16_sect_balances_germany[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco16_sect_balances_germany <- data.table::melt(
ameco16_sect_balances_germany, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "sect_balance_gvnt")
ameco16_sect_balances_germany[, year:=as.double(as.character(year))]
ameco16_sect_balances_germany[COUNTRY=="West Germany" & year>1990, sect_balance_gvnt:=NA]
ameco16_sect_balances_germany <- ameco16_sect_balances_germany[, COUNTRY:=countrycode::countrycode(
COUNTRY, "country.name", "iso3c"
)]
ameco16_sect_balances_germany[, sect_balance_gvnt:=mean(sect_balance_gvnt, na.rm = T), year]
ameco16_sect_balances_germany <- unique(ameco16_sect_balances_germany)
ameco16_sect_balances[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco16_sect_balances <- ameco16_sect_balances[, COUNTRY2:=countrycode::countrycode(COUNTRY, "country.name", "iso3c"
)
][!is.na(COUNTRY) & COUNTRY2 != "DEU"][, COUNTRY:=NULL]
data.table::setnames(ameco16_sect_balances, old = "COUNTRY2", new = "COUNTRY")
ameco16_sect_balances <- data.table::melt(ameco16_sect_balances,
id.vars=c("COUNTRY"),
variable.name="year",
value.name = "sect_balance_gvnt")
ameco16_sect_balances <- rbind(ameco16_sect_balances, ameco16_sect_balances_germany)
ameco16_sect_balances[, sect_balance_gvnt:=as.double(sect_balance_gvnt)]
ameco16_sect_balances[, year:=as.double(as.character(year))]
ameco16_sect_balances <- ameco16_sect_balances[year<=last_year & year>=first_year]
if (sum(duplicated(ameco16_sect_balances, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco16_sect_balances!")
}
# Private sector:
# Step 1: get balance for corporations
ameco14_sect_balances <- data.table::fread("data-raw/ameco/AMECO14.TXT.gz",
fill = TRUE, header = TRUE)
ameco14_sect_balances <- ameco14_sect_balances[
TITLE=="Net lending (+) or net borrowing (-): corporations" & UNIT=="Mrd ECU/EUR"
][
!COUNTRY%in%aggregates_2be_eliminated
]
ameco14_sect_balances_germany <-data.table::copy(ameco14_sect_balances)
ameco14_sect_balances_germany <- ameco14_sect_balances_germany[
COUNTRY %in% c("Germany", "West Germany")]
ameco14_sect_balances_germany[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco14_sect_balances_germany <- data.table::melt(
ameco14_sect_balances_germany, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "sect_balance_corp_abs")
ameco14_sect_balances_germany[, year:=as.double(as.character(year))]
ameco14_sect_balances_germany[COUNTRY=="West Germany" & year>1990, sect_balance_corp_abs:=NA]
ameco14_sect_balances_germany <- ameco14_sect_balances_germany[, COUNTRY:=countrycode::countrycode(
COUNTRY, "country.name", "iso3c"
)]
ameco14_sect_balances_germany[, sect_balance_corp_abs:=mean(sect_balance_corp_abs, na.rm = T), year]
ameco14_sect_balances_germany <- unique(ameco14_sect_balances_germany)
ameco14_sect_balances[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco14_sect_balances <- ameco14_sect_balances[, COUNTRY2:=countrycode::countrycode(COUNTRY, "country.name", "iso3c"
)
][!is.na(COUNTRY) & COUNTRY2 != "DEU"][, COUNTRY:=NULL]
data.table::setnames(ameco14_sect_balances, old = "COUNTRY2", new = "COUNTRY")
ameco14_sect_balances <- data.table::melt(ameco14_sect_balances,
id.vars=c("COUNTRY"),
variable.name="year",
value.name = "sect_balance_corp_abs")
ameco14_sect_balances <- rbind(ameco14_sect_balances, ameco14_sect_balances_germany)
ameco14_sect_balances[, sect_balance_corp_abs:=as.double(sect_balance_corp_abs)]
ameco14_sect_balances[, year:=as.double(as.character(year))]
ameco14_sect_balances <- ameco14_sect_balances[year<=last_year & year>=first_year]
if (sum(duplicated(ameco14_sect_balances, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco14_sect_balances!")
}
# Step 2: get balances for households
ameco15_sect_balances <- data.table::fread("data-raw/ameco/AMECO15.TXT.gz",
fill = TRUE, header = TRUE)
ameco15_sect_balances <- ameco15_sect_balances[
TITLE=="Net lending (+) or net borrowing (-): households and NPISH" & UNIT=="Mrd ECU/EUR"
][
!COUNTRY%in%aggregates_2be_eliminated
]
ameco15_sect_balances_germany <-data.table::copy(ameco15_sect_balances)
ameco15_sect_balances_germany <- ameco15_sect_balances_germany[
COUNTRY %in% c("Germany", "West Germany")]
ameco15_sect_balances_germany[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco15_sect_balances_germany <- data.table::melt(
ameco15_sect_balances_germany, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "sect_balance_HH_abs")
ameco15_sect_balances_germany[, year:=as.double(as.character(year))]
ameco15_sect_balances_germany[COUNTRY=="West Germany" & year>1990, sect_balance_HH_abs:=NA]
ameco15_sect_balances_germany <- ameco15_sect_balances_germany[, COUNTRY:=countrycode::countrycode(
COUNTRY, "country.name", "iso3c"
)]
ameco15_sect_balances_germany[, sect_balance_HH_abs:=mean(sect_balance_HH_abs, na.rm = T), year]
ameco15_sect_balances_germany <- unique(ameco15_sect_balances_germany)
ameco15_sect_balances[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco15_sect_balances <- ameco15_sect_balances[, COUNTRY2:=countrycode::countrycode(COUNTRY, "country.name", "iso3c"
)
][!is.na(COUNTRY) & COUNTRY2 != "DEU"][, COUNTRY:=NULL]
data.table::setnames(ameco15_sect_balances, old = "COUNTRY2", new = "COUNTRY")
ameco15_sect_balances <- data.table::melt(ameco15_sect_balances,
id.vars=c("COUNTRY"),
variable.name="year",
value.name = "sect_balance_HH_abs")
ameco15_sect_balances <- rbind(ameco15_sect_balances, ameco15_sect_balances_germany)
ameco15_sect_balances[, sect_balance_HH_abs:=as.double(sect_balance_HH_abs)]
ameco15_sect_balances[, year:=as.double(as.character(year))]
ameco15_sect_balances <- ameco15_sect_balances[year<=last_year & year>=first_year]
if (sum(duplicated(ameco15_sect_balances, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco15_sect_balances!")
}
# Step 3: get GDP at current prices for normalization--------------------------
ameco06_sect_balances <- data.table::fread("data-raw/ameco/AMECO6.TXT.gz",
fill = TRUE, header = TRUE)
ameco06_sect_balances <- ameco06_sect_balances[
TITLE=="Gross domestic product at current prices" & UNIT=="Mrd ECU/EUR"
][
!COUNTRY%in%aggregates_2be_eliminated
]
ameco06_sect_balances_germany <-data.table::copy(ameco06_sect_balances)
ameco06_sect_balances_germany <- ameco06_sect_balances_germany[
COUNTRY %in% c("Germany", "West Germany")]
ameco06_sect_balances_germany[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco06_sect_balances_germany <- data.table::melt(
ameco06_sect_balances_germany, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "GDP_cp")
ameco06_sect_balances_germany[, year:=as.double(as.character(year))]
ameco06_sect_balances_germany[COUNTRY=="West Germany" & year>1990, GDP_cp:=NA]
ameco06_sect_balances_germany <- ameco06_sect_balances_germany[, COUNTRY:=countrycode::countrycode(
COUNTRY, "country.name", "iso3c"
)]
ameco06_sect_balances_germany[, GDP_cp:=mean(GDP_cp, na.rm = T), year]
ameco06_sect_balances_germany <- unique(ameco06_sect_balances_germany)
ameco06_sect_balances[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco06_sect_balances <- ameco06_sect_balances[, COUNTRY2:=countrycode::countrycode(COUNTRY, "country.name", "iso3c"
)
][!is.na(COUNTRY) & COUNTRY2 != "DEU"][, COUNTRY:=NULL]
data.table::setnames(ameco06_sect_balances, old = "COUNTRY2", new = "COUNTRY")
ameco06_sect_balances <- data.table::melt(ameco06_sect_balances,
id.vars=c("COUNTRY"),
variable.name="year",
value.name = "GDP_cp")
ameco06_sect_balances <- rbind(ameco06_sect_balances, ameco06_sect_balances_germany)
ameco06_sect_balances[, GDP_cp:=as.double(GDP_cp)]
ameco06_sect_balances[, year:=as.double(as.character(year))]
ameco06_sect_balances <- ameco06_sect_balances[year<=last_year & year>=first_year]
if (sum(duplicated(ameco06_sect_balances, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco06_sect_balances!")
}
# Step 4: divide corporate and household value by GDP
ameco_sect_balances <- Reduce(function(...) merge(..., all=TRUE,
by = c("COUNTRY", "year")),
list(ameco16_sect_balances,
ameco10_sect_balances,
ameco14_sect_balances,
ameco15_sect_balances,
ameco06_sect_balances)
)
ameco_sect_balances <- ameco_sect_balances[, .(COUNTRY, year,
sect_balance_gvnt,
sect_balance_foreign,
sect_balance_corp_abs,
sect_balance_HH_abs, GDP_cp)]
ameco_sect_balances[, sect_balance_priv_corp:=(sect_balance_corp_abs/GDP_cp)*100]
ameco_sect_balances[, sect_balance_priv_HH:=(sect_balance_HH_abs/GDP_cp)*100]
ameco_sect_balances[, sect_balance_priv:=sect_balance_priv_corp+sect_balance_priv_HH]
ameco_sect_balances[, balance_test:=sect_balance_priv+sect_balance_gvnt+sect_balance_foreign]
ameco_sect_balances[, year:=as.integer(year)]
ameco_sect_balances[, c("sect_balance_corp_abs", "balance_test",
"sect_balance_HH_abs", "GDP_cp"):=NULL]
# Merge all AMECO tables-------------------------------------------------------
print("...merge all AMECO...")
ameco_full <- Reduce(function(...) merge(..., all=TRUE,
by = c("COUNTRY", "year")),
list(ameco01_pop, ameco01_unemp, ameco02, ameco03,
ameco07_wage_share, ameco07_rulc, ameco07_nulc,
ameco10, ameco_sect_balances))
ameco_full <- ameco_full[, .(year=as.double(as.character(year)),
iso3c=COUNTRY,
cap_form,
cpi,
current_account_GDP_ameco,
nulc_eur,
nulc_lcu,
population_ameco,
rulc,
unemp_rate,
wage_share,
sect_balance_gvnt,
sect_balance_foreign,
sect_balance_priv_corp,
sect_balance_priv_HH,
sect_balance_priv)
]
print("....finished.")
# TODO check for duplicates
# Chinn-Ito index==============================================================
print("Chinn-Ito index...")
chinn_ito_url <- "http://web.pdx.edu/~ito/kaopen_2016.dta"
chinn_ito_file <- "data-raw/chinn_ito.csv"
if (download_data | !file.exists((paste0(chinn_ito_file, ".gz")))){
tmp <- tempfile(fileext = ".dta")
download.file(chinn_ito_url, tmp,
quiet = FALSE)
chinn_ito_raw <- data.table::as.data.table(haven::read_dta(tmp))
chinn_ito_raw <- chinn_ito_raw[ccode %in% countries_considered,
.(ccode, year,
kaopen, # Chinn-Ito index
ka_open # Normalized Chinn-Ito index
)
]
data.table::fwrite(chinn_ito_raw, chinn_ito_file)
R.utils::gzip(paste0(chinn_ito_file),
destname=paste0(chinn_ito_file, ".gz"),
overwrite = TRUE)
} else {
chinn_ito_raw <- data.table::fread(paste0(chinn_ito_file, ".gz"))
}
chinn_ito <- chinn_ito_raw[,
.(
iso3c = ccode,
year = as.double(year),
chinn_ito = as.double(kaopen),
chinn_ito_normed = as.double(ka_open)
)]
print("finished.")
# KOF Globalization index======================================================
print("KOF Globalization Index...")
kof_url <- "https://www.ethz.ch/content/dam/ethz/special-interest/dual/kof-dam/documents/Globalization/2018/Data_2018_2.dta"
kof_file <- "data-raw/kof.csv"
if (download_data | !file.exists((paste0(kof_file, ".gz")))){
warning("KOF data is not updated automatically.
Currently downloading file Data_2018_2.dta (May 2019).")
tmp <- tempfile(fileext = ".dta")
download.file(kof_url, tmp,
quiet = FALSE)
kof_raw <- data.table::as.data.table(haven::read_dta(tmp))
kof_raw <- kof_raw[code %in% countries_considered,
.(code, year,
KOFGI, # KOF Globalisation Index
KOFGIdf, # "KOF Globalisation Index, de facto
KOFGIdj, # KOF Globalisation Index, de jure
KOFEcGI, # KOF Economic Globalisation Index
KOFEcGIdf, # KOF Economic Globalisation Index, de facto
KOFEcGIdj, # KOF Economic Globalisation Index, de jure
KOFTrGI, # KOF Trade Globalisation Index
KOFTrGIdf, # KOF Trade Globalisation Index, de facto
KOFTrGIdj, # KOF Trade Globalisation Index, de jure
KOFFiGI, # KOF Financial Globalisation Index
KOFFiGIdf, # KOF Financial Globalisation Index, de facto
KOFFiGIdj # KOF Financial Globalisation Index, de jure
)]
data.table::fwrite(kof_raw, kof_file)
R.utils::gzip(paste0(kof_file),
destname=paste0(kof_file, ".gz"),
overwrite = TRUE)
} else {
kof_raw <- data.table::fread(paste0(kof_file, ".gz"))
}
kof <- kof_raw[, .(
iso3c = code,
year = as.double(year),
kof_G = as.double(KOFGI), # KOF Globalisation Index
kof_G_df = as.double(KOFGIdf), # "KOF Globalisation Index, de facto
kof_G_dj = as.double(KOFGIdj), # KOF Globalisation Index, de jure
kof_EcG = as.double(KOFEcGI), # KOF Economic Globalisation Index
kof_EcG_df = as.double(KOFEcGIdf), # KOF Economic Globalisation Index, de facto
kof_EcG_dj = as.double(KOFEcGIdj), # KOF Economic Globalisation Index, de jure
kof_trade = as.double(KOFTrGI), # KOF Trade Globalisation Index
kof_trade_df = as.double(KOFTrGIdf), # KOF Trade Globalisation Index, de facto
kof_trade_dj = as.double(KOFTrGIdj), # KOF Trade Globalisation Index, de jure
kof_fin = as.double(KOFFiGI), # KOF Financial Globalisation Index
kof_fin_df = as.double(KOFFiGIdf), # KOF Financial Globalisation Index, de facto
kof_fin_dj = as.double(KOFFiGIdj) # KOF Financial Globalisation Index, de jure
)]
print("finished.")
# Barro Lee education data=====================================================
print("Barro-Lee educational data...")
barro_lee_url <- "http://www.barrolee.com/data/BL_v2.2/BL2013_MF1599_v2.2.csv"
barro_lee_file <- "data-raw/barro_lee.csv"
if (download_data | !file.exists((paste0(barro_lee_file, ".gz")))){
tmp <- tempfile(fileext = ".csv")
download.file(barro_lee_url, tmp,
quiet = FALSE)
barro_lee_raw <- data.table::fread(tmp)
barro_lee_raw <- barro_lee_raw[, .(year, WBcode, lsc, lhc, yr_sch)]
data.table::fwrite(barro_lee_raw, barro_lee_file)
R.utils::gzip(paste0(barro_lee_file),
destname=paste0(barro_lee_file, ".gz"),
overwrite = TRUE)
} else {
barro_lee_raw <- data.table::fread(paste0(barro_lee_file, ".gz"))
}
barro_lee <- barro_lee_raw[!WBcode%in%c("REU", "ROM", "SER"),
.(iso3c=countrycode::countrycode(WBcode,
"wb", "iso3c"),
year=as.double(year),
school_agv_yrs=as.double(yr_sch),
school_share_sec=as.double(lsc),
school_share_ter=as.double(lhc))
][
iso3c %in% countries_considered
]
print("finished.")
# Complexity data==============================================================
print("Complexity data...")
complexity_harvard_url <- "https://intl-atlas-downloads.s3.amazonaws.com/country_sitcproductsection_year.csv.zip"
complexity_harv_file_name <- "data-raw/complexity_harv.csv"
complexity_harv_origin_zip_file <- "country_sitcproductsection_year.csv"
if (!download_data & file.exists(paste0(complexity_harv_file_name, ".gz"))){
complexity_harv <- data.table::fread(
paste0(complexity_harv_file_name, ".gz")
)
} else {
tmp <- tempfile(fileext = ".zip")
download.file(complexity_harvard_url,
tmp,
quiet = FALSE)
unzip(tmp, exdir = "data-raw", files = complexity_harv_origin_zip_file)
file.rename(paste0("data-raw/", complexity_harv_origin_zip_file),
complexity_harv_file_name)
unlink(paste0("data-raw/", complexity_harv_origin_zip_file),
recursive = T)
complexity_harv_raw <- data.table::fread(complexity_harv_file_name)
complexity_harv <- complexity_harv_raw[
!is.na(countrycode::countrycode(location_code, "iso3c", "country.name",
warn = FALSE)),
.(year, hs_eci, hs_coi, sitc_eci, sitc_coi, location_code)]
complexity_harv <- unique(complexity_harv, by = c("year", "location_code"))
data.table::fwrite(x = complexity_harv, file = complexity_harv_file_name)
R.utils::gzip(paste0(complexity_harv_file_name),
destname=paste0(complexity_harv_file_name, ".gz"),
overwrite = TRUE)
}
complexity_mit_url <- "https://atlas.media.mit.edu/en/rankings/country/eci/?download=true&download_all=true"
complexity_mit_country_names_url <- "https://atlas.media.mit.edu/static/db/raw/country_names.tsv.bz2"
complexity_mit_file_name <- "data-raw/complexity_mit.csv"
complexity_mit_origin_zip_file <- "country_sitcproductsection_year.csv"
if (!download_data & file.exists(paste0(complexity_harv_file_name, ".gz"))){
complexity_mit <- data.table::fread(
paste0(complexity_mit_file_name, ".gz")
)
} else {
tmp <- tempfile(fileext = ".csv")
download.file(complexity_mit_url,
tmp,
quiet = FALSE)
complexity_mit_raw <- data.table::fread(tmp)
tmp2 <- tempfile(fileext = ".bz2")
download.file(complexity_mit_country_names_url,
tmp2,
quiet = FALSE)
complexity_mit_country_names <- data.table::fread(tmp2)
complexity_mit <- data.table::copy(complexity_mit_raw)
complexity_mit[, iso3c:=toupper(countrycode::countrycode(
Country, "name", "id_3char",
custom_dict = as.data.frame(complexity_mit_country_names)))
][, c("Country", "Country ID"):=NULL]
data.table::fwrite(x = complexity_mit, file = complexity_mit_file_name)
R.utils::gzip(paste0(complexity_mit_file_name),
destname=paste0(complexity_mit_file_name, ".gz"),
overwrite = TRUE)
}
complexity_data <- data.table::as.data.table(
dplyr::full_join(
complexity_mit[iso3c %in% countries_considered],
complexity_harv[location_code %in% countries_considered],
by = c("Year"="year", "iso3c" = "location_code")
)
)
data.table::setnames(complexity_data,
old = c("Year", "ECI", "ECI+", "iso3c", "hs_eci",
"hs_coi", "sitc_eci", "sitc_coi"),
new = c("year", "eci_mit", "eci_mit_plus", "iso3c",
"eci_harv_hs", "eci_harc_coi_hs",
"eci_harv_sitc", "eci_harc_coi_sitc"))
print("finished.")
# # Get export data from MIT===================================================
# # https://atlas.media.mit.edu/en/resources/data/
# if (download_data_exports_mit==TRUE){
#   export_data_mit_file_name <- "data/mit_export_data.fst" # TODO in zip ändern
#   if (update_data){
#     web_link_mit <- "https://atlas.media.mit.edu/static/db/raw/year_origin_sitc_rev2.tsv.bz2"
#     web_link_countries <- "https://atlas.media.mit.edu/static/db/raw/country_names.tsv.bz2"
#     mit_country_names <- as.data.frame(fread(web_link_countries))
#     export_data_raw <- fread(web_link_mit,
#                              colClasses = c("double", rep("character", 2),
#                                             rep("double", 4)),
#                              select = c("year", "origin", "sitc",
#                                         "export_val"))
#     export_data_raw[, location_code:=countrycode(
#       countrycode(origin, "id_3char", "name",
#                   custom_dict = mit_country_names),
#       "country.name", "iso3c")] # TODO Fix location code
#     export_data_raw <- export_data_raw[location_code %in% countrycode(
#       countries_considered, "iso2c", "iso3c"),
#       .(year, export_value=export_val, location_code, sitc_product_code=sitc)]
#     fst::write.fst(x = export_data_raw,
#                    path = export_data_mit_file_name, compress = 100)
#   } else{
#     export_data_raw <- fst::read.fst(export_data_mit_file_name,
#                                      as.data.table = T)
#   }
# }
#
# # Get export data from Harvard=================================================
# # http://atlas.cid.harvard.edu/downloads
# if (download_data_exports_harv==TRUE){
#   export_data_file_name <- "data/hrvd_complexity_atlas.fst" # TODO in zip umwandeln
#   if (update_data){
#     web_link <- "https://intl-atlas-downloads.s3.amazonaws.com/country_sitcproduct4digit_year.csv.zip"
#     export_data_raw <- fread(cmd = paste0("curl ", web_link, " | funzip"),
#                              colClasses = c(rep("double", 11),
#                                             rep("character", 4)),
#                              select = c("year", "export_value",
#                                         "location_code", "sitc_product_code"))
#     export_data_raw <- export_data_raw[location_code%in%countrycode(
#       countries_considered, "iso2c", "iso3c")]
#     fst::write.fst(x = export_data_raw,
#                    path = export_data_file_name, compress = 100)
#   } else{
#     export_data_raw <- fst::read.fst(export_data_file_name,
#                                      as.data.table = T)
#   }
# }
# export_data_raw[, year:=as.double(year)
#                 ][, export_value:=as.double(export_value)
#                   ][, total_exports:=sum(export_value, na.rm = T),
#                     .(location_code, year)]
# TODO Das noch kombinieren und Exportdatan separat speichern
# weiter unten dann nur Komplexitätswerte nehmen
# Die aber vielleicht sowieso immer erheben
# Merge data===================================================================
# TODO Testen ob es keine Dopplungen gibt
print("Merging data...")
macro_data <- Reduce(function(...) merge(..., all=TRUE,
by = c("iso3c", "year")),
list(wb_data, swiid_raw, ameco_full, oecd_data, lmf,
complexity_data, barro_lee, kof, chinn_ito,
eurostat_bond_data_raw)
)
save(macro_data, file = "data/macro_data.rdata")
macro_data_csv_name <- "data/macro_data.csv"
data.table::fwrite(macro_data, file = macro_data_csv_name)
R.utils::gzip(paste0(macro_data_csv_name),
destname=paste0(macro_data_csv_name, ".gz"),
overwrite = TRUE)
print("finished.")
library(MacroDataR)
