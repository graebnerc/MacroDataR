ameco01_pop_germany <- ameco01_pop_germany[COUNTRY %in% c("Germany", "West Germany")]
ameco01_pop_germany[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco01_pop_germany <- data.table::melt(ameco01_pop_germany, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "population_ameco")
ameco01_pop_germany[, year:=as.double(as.character(year))]
ameco01_pop_germany[COUNTRY=="West Germany" & year>1990, population_ameco:=NA]
ameco01_pop_germany <- ameco01_pop_germany[, COUNTRY:=countrycode::countrycode(COUNTRY,
"country.name", "iso3c"
)]
ameco01_pop_germany[, population_ameco:=mean(population_ameco, na.rm = T), year]
ameco01_pop_germany <- unique(ameco01_pop_germany)
ameco01_pop <- ameco01_pop[!COUNTRY %in% c("Germany", "West Germany")]
ameco01_pop[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco01_pop <- ameco01_pop[, COUNTRY2:=countrycode::countrycode(COUNTRY,
"country.name", "iso3c"
)
][!is.na(COUNTRY)][!is.na(COUNTRY2)][, COUNTRY:=NULL]
data.table::setnames(ameco01_pop, old = "COUNTRY2", new = "COUNTRY")
ameco01_pop <- data.table::melt(ameco01_pop, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "population_ameco")
ameco01_pop <- rbind(ameco01_pop, ameco01_pop_germany)
ameco01_pop[, population_ameco:=as.double(as.character(population_ameco))]
if (sum(duplicated(ameco01_pop, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco01_pop!")
}
# Harmonised consumer price index (All-items) (2015 = 100)---------------------
print("...ameco02...")
ameco02 <- data.table::fread("data-raw/ameco/AMECO2.TXT.gz",
fill = TRUE, header = TRUE)
ameco02 <- ameco02[
TITLE=="Harmonised consumer price index (All-items)"][
!COUNTRY %in% aggregates_2be_eliminated
]
ameco02 <- ameco02[, COUNTRY:=countrycode::countrycode(COUNTRY,
"country.name", "iso3c"
)
][!is.na(COUNTRY)]
ameco02[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco02 <- data.table::melt(ameco02, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "cpi")
if (sum(duplicated(ameco02, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco02!")
}
# Capital formation----------------------------------------------------------
# TODO Wir hatten: Real gross fixed capital formation / real net capital stock; aber welche Werte sind das?
# capital_formation_real # 3
# capital_stock_real # 3
# Remark: after 1990 the values for the united Germany are used
print("...ameco03...")
ameco03 <- data.table::fread("data-raw/ameco/AMECO3.TXT.gz",
fill = TRUE, header = TRUE)
ameco03 <- ameco03[
TITLE%in%c("Gross fixed capital formation at current prices: total economy")
][
!COUNTRY %in% aggregates_2be_eliminated
]
ameco03 <- ameco03[UNIT=="Mrd ECU/EUR"]
ameco03_germany <- ameco03[COUNTRY %in% c("Germany", "West Germany")]
ameco03_germany[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco03_germany <- ameco03_germany[, COUNTRY:=countrycode::countrycode(COUNTRY,
"country.name", "iso3c"
)
][!is.na(COUNTRY)]
ameco03_germany <- data.table::melt(ameco03_germany, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "cap_form")
ameco03_germany[, cap_form:=mean(cap_form, na.rm=T), year]
ameco03_germany <- unique(ameco03_germany)
ameco03 <- ameco03[!COUNTRY %in% c("Germany", "West Germany")]
ameco03[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco03 <- ameco03[, COUNTRY:=countrycode::countrycode(COUNTRY,
"country.name", "iso3c"
)
][!is.na(COUNTRY)]
ameco03 <- data.table::melt(ameco03, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "cap_form")
ameco03 <- rbind(ameco03, ameco03_germany)
if (sum(duplicated(ameco03, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco03!")
}
# GDP growth-------------------------------------------------------------------
# TODO: Einheiten noch fixen, aber vielleicht besser von Weltbank wg coverage
print("..ameco06..")
ameco06 <- data.table::fread("data-raw/ameco/AMECO6.TXT.gz",
fill = TRUE, header = TRUE)
gdp_vars <- c(
"Gross domestic product at current prices",
"Gross domestic product at 2010 reference levels",
"Gross domestic product at current prices per head of population",
"Gross domestic product at 2010 reference levels per head of population"
)
ameco06_GDP <- ameco06[
TITLE%in%gdp_vars
][
!COUNTRY %in% aggregates_2be_eliminated
]
# Ameco 7--------------------------------------------------------------------
print("...ameco07...")
ameco07 <- data.table::fread("data-raw/ameco/AMECO7.TXT.gz",
fill = TRUE, header = TRUE)
# Wage share-----------------------------------------------------------------
print("...wage share...")
ameco07_wage_share <- ameco07[
TITLE=="Adjusted wage share: total economy: as percentage of GDP at current prices (Compensation per employee as percentage of GDP at market prices per person employed.)"
][
!COUNTRY %in% aggregates_2be_eliminated
]
ameco07_wage_share_germany <-data.table::copy(ameco07_wage_share)
ameco07_wage_share_germany <- ameco07_wage_share_germany[
COUNTRY %in% c("Germany", "West Germany")]
ameco07_wage_share_germany[, c("CODE", "SUB-CHAPTER", "TITLE",
"UNIT",  "V67"):=NULL]
ameco07_wage_share_germany <- data.table::melt(
ameco07_wage_share_germany, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "wage_share")
ameco07_wage_share_germany[, year:=as.double(as.character(year))]
ameco07_wage_share_germany[COUNTRY=="West Germany" & year>1990, wage_share:=NA]
ameco07_wage_share_germany <- ameco07_wage_share_germany[, COUNTRY:=countrycode::countrycode(COUNTRY,
"country.name", "iso3c"
)]
ameco07_wage_share_germany[, wage_share:=mean(wage_share, na.rm = T), year]
ameco07_wage_share_germany <- unique(ameco07_wage_share_germany)
ameco07_wage_share[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco07_wage_share <- ameco07_wage_share[, COUNTRY2:=countrycode::countrycode(COUNTRY,
"country.name", "iso3c"
)
][!is.na(COUNTRY) & COUNTRY2 != "DEU"][, COUNTRY:=NULL]
data.table::setnames(ameco07_wage_share, old = "COUNTRY2", new = "COUNTRY")
ameco07_wage_share <- data.table::melt(ameco07_wage_share,
id.vars=c("COUNTRY"),
variable.name="year",
value.name = "wage_share")
ameco07_wage_share <- rbind(ameco07_wage_share, ameco07_wage_share_germany)
ameco07_wage_share[, wage_share:=as.double(wage_share)]
if (sum(duplicated(ameco07_wage_share, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco07_wage_share!")
}
# RULC-----------------------------------------------------------------------
print("...RULC...")
ameco07_rulc <- ameco07[
TITLE=="Real unit labour costs: total economy (Ratio of compensation per employee to nominal GDP per person employed.)"
][
!COUNTRY%in%aggregates_2be_eliminated
][
!COUNTRY %in% c(
'EU15 (including DEL "linked" Germany)',
'EA12 (including DEL "linked" Germany)',
'EU15 (including DEL "linked" Germany)',
'EA12 (including DEL "linked" Germany)'
)
]
# for: ameco07_rulc
ameco07_rulc[ , COUNTRY:=countrycode::countrycode(
COUNTRY, "country.name", "iso3c")]
ameco07_rulc[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco07_rulc <- data.table::melt(ameco07_rulc,
id.vars=c("COUNTRY"),
variable.name="year",
value.name = "rulc")
if (sum(duplicated(ameco07_rulc, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco07_rulc!")
}
# NULC-----------------------------------------------------------------------
print("...NULC...")
ameco07_nulc <- ameco07[
TITLE=="Nominal unit labour costs: total economy (Ratio of compensation per employee to real GDP per person employed.)"
][
!COUNTRY%in%aggregates_2be_eliminated
][
!COUNTRY %in% c(
'EU15 (including DEL "linked" Germany)',
'EA12 (including DEL "linked" Germany)',
'EU15 (including DEL "linked" Germany)',
'EA12 (including DEL "linked" Germany)'
)
]
ameco07_nulc[ , COUNTRY:=countrycode::countrycode(
COUNTRY, "country.name", "iso3c")]
ameco07_nulc[, c("CODE", "SUB-CHAPTER", "TITLE", "V67"):=NULL]
ameco07_nulc <- data.table::melt(ameco07_nulc,
id.vars=c("COUNTRY", "UNIT"),
variable.name="year",
value.name = "nulc")
ameco07_nulc <- data.table::dcast(ameco07_nulc, COUNTRY+year~UNIT, value.var="nulc")
data.table::setnames(ameco07_nulc,
old = c("COUNTRY", "year", "(EUR: 2010 = 100)",
"(National currency: 2010 = 100)"),
new = c("COUNTRY", "year", "nulc_eur", "nulc_lcu")
)
if (sum(duplicated(ameco07_nulc, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco07_nulc!")
}
# Current account--------------------------------------------------------------
print("...Current Account...")
ameco10 <- data.table::fread("data-raw/ameco/AMECO10.TXT.gz",
fill = TRUE, header = TRUE)
ameco10 <- ameco10[
TITLE=="Balance on current transactions with the rest of the world (National accounts)" &
UNIT=="(Percentage of gross domestic product at current prices)"
][
!COUNTRY%in%aggregates_2be_eliminated
]
ameco10_germany <-data.table::copy(ameco10)
ameco10_germany <- ameco10_germany[
COUNTRY %in% c("Germany", "West Germany")]
ameco10_germany[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco10_germany <- data.table::melt(
ameco10_germany, id.vars=c("COUNTRY"),
variable.name="year",
value.name = "current_account_GDP_ameco")
ameco10_germany[, year:=as.double(as.character(year))]
ameco10_germany[COUNTRY=="West Germany" & year>1990, current_account_GDP_ameco:=NA]
ameco10_germany <- ameco10_germany[, COUNTRY:=countrycode::countrycode(
COUNTRY, "country.name", "iso3c"
)]
ameco10_germany[, current_account_GDP_ameco:=mean(current_account_GDP_ameco, na.rm = T), year]
ameco10_germany <- unique(ameco10_germany)
ameco10[, c("CODE", "SUB-CHAPTER", "TITLE", "UNIT",  "V67"):=NULL]
ameco10 <- ameco10[, COUNTRY2:=countrycode::countrycode(COUNTRY, "country.name", "iso3c"
)
][!is.na(COUNTRY) & COUNTRY2 != "DEU"][, COUNTRY:=NULL]
data.table::setnames(ameco10, old = "COUNTRY2", new = "COUNTRY")
ameco10 <- data.table::melt(ameco10,
id.vars=c("COUNTRY"),
variable.name="year",
value.name = "current_account_GDP_ameco")
ameco10 <- rbind(ameco10, ameco10_germany)
ameco10[, current_account_GDP_ameco:=as.double(current_account_GDP_ameco)]
if (sum(duplicated(ameco10, by = c("COUNTRY", "year")))>0){
warning("Duplicated rows in ameco10!")
}
# Merge all AMECO tables-----------------------------------------------------
print("...merge all AMECO...")
ameco_full <- Reduce(function(...) merge(..., all=TRUE,
by = c("COUNTRY", "year")),
list(ameco01_pop, ameco01_unemp, ameco02, ameco03,
ameco07_wage_share, ameco07_rulc, ameco07_nulc,
ameco10))
ameco_full <- ameco_full[, .(year=as.double(as.character(year)),
iso3c=COUNTRY,
cap_form,
cpi,
current_account_GDP_ameco,
nulc_eur,
nulc_lcu,
population_ameco,
rulc,
unemp_rate,
wage_share)
]
print("....finished.")
# TODO check for duplicates
# Chinn-Ito index==============================================================
print("Chinn-Ito index...")
chinn_ito_url <- "http://web.pdx.edu/~ito/kaopen_2016.dta"
chinn_ito_file <- "data-raw/chinn_ito.csv"
if (download_data | !file.exists((paste0(chinn_ito_file, ".gz")))){
tmp <- tempfile(fileext = ".dta")
download.file(chinn_ito_url, tmp,
quiet = FALSE)
chinn_ito_raw <- data.table::as.data.table(haven::read_dta(tmp))
chinn_ito_raw <- chinn_ito_raw[ccode %in% countries_considered,
.(ccode, year,
kaopen, # Chinn-Ito index
ka_open # Normalized Chinn-Ito index
)
]
data.table::fwrite(chinn_ito_raw, chinn_ito_file)
R.utils::gzip(paste0(chinn_ito_file),
destname=paste0(chinn_ito_file, ".gz"),
overwrite = TRUE)
} else {
chinn_ito_raw <- data.table::fread(paste0(chinn_ito_file, ".gz"))
}
chinn_ito <- chinn_ito_raw[,
.(
iso3c = ccode,
year = as.double(year),
chinn_ito = as.double(kaopen),
chinn_ito_normed = as.double(ka_open)
)]
print("finished.")
# KOF Globalization index======================================================
print("KOF Globalization Index...")
kof_url <- "https://www.ethz.ch/content/dam/ethz/special-interest/dual/kof-dam/documents/Globalization/2018/Data_2018_2.dta"
kof_file <- "data-raw/kof.csv"
if (download_data | !file.exists((paste0(kof_file, ".gz")))){
warning("KOF data is not updated automatically.
Currently downloading file Data_2018_2.dta (May 2019).")
tmp <- tempfile(fileext = ".dta")
download.file(kof_url, tmp,
quiet = FALSE)
kof_raw <- data.table::as.data.table(haven::read_dta(tmp))
kof_raw <- kof_raw[code %in% countries_considered,
.(code, year,
KOFGI, # KOF Globalisation Index
KOFGIdf, # "KOF Globalisation Index, de facto
KOFGIdj, # KOF Globalisation Index, de jure
KOFEcGI, # KOF Economic Globalisation Index
KOFEcGIdf, # KOF Economic Globalisation Index, de facto
KOFEcGIdj, # KOF Economic Globalisation Index, de jure
KOFTrGI, # KOF Trade Globalisation Index
KOFTrGIdf, # KOF Trade Globalisation Index, de facto
KOFTrGIdj, # KOF Trade Globalisation Index, de jure
KOFFiGI, # KOF Financial Globalisation Index
KOFFiGIdf, # KOF Financial Globalisation Index, de facto
KOFFiGIdj # KOF Financial Globalisation Index, de jure
)]
data.table::fwrite(kof_raw, kof_file)
R.utils::gzip(paste0(kof_file),
destname=paste0(kof_file, ".gz"),
overwrite = TRUE)
} else {
kof_raw <- data.table::fread(paste0(kof_file, ".gz"))
}
kof <- kof_raw[, .(
iso3c = code,
year = as.double(year),
kof_G = as.double(KOFGI), # KOF Globalisation Index
kof_G_df = as.double(KOFGIdf), # "KOF Globalisation Index, de facto
kof_G_dj = as.double(KOFGIdj), # KOF Globalisation Index, de jure
kof_EcG = as.double(KOFEcGI), # KOF Economic Globalisation Index
kof_EcG_df = as.double(KOFEcGIdf), # KOF Economic Globalisation Index, de facto
kof_EcG_dj = as.double(KOFEcGIdj), # KOF Economic Globalisation Index, de jure
kof_trade = as.double(KOFTrGI), # KOF Trade Globalisation Index
kof_trade_df = as.double(KOFTrGIdf), # KOF Trade Globalisation Index, de facto
kof_trade_dj = as.double(KOFTrGIdj), # KOF Trade Globalisation Index, de jure
kof_fin = as.double(KOFFiGI), # KOF Financial Globalisation Index
kof_fin_df = as.double(KOFFiGIdf), # KOF Financial Globalisation Index, de facto
kof_fin_dj = as.double(KOFFiGIdj) # KOF Financial Globalisation Index, de jure
)]
print("finished.")
# Barro Lee education data=====================================================
print("Barro-Lee educational data...")
barro_lee_url <- "http://www.barrolee.com/data/BL_v2.2/BL2013_MF1599_v2.2.csv"
barro_lee_file <- "data-raw/barro_lee.csv"
if (download_data | !file.exists((paste0(barro_lee_file, ".gz")))){
tmp <- tempfile(fileext = ".csv")
download.file(barro_lee_url, tmp,
quiet = FALSE)
barro_lee_raw <- data.table::fread(tmp)
barro_lee_raw <- barro_lee_raw[, .(year, WBcode, lsc, lhc, yr_sch)]
data.table::fwrite(barro_lee_raw, barro_lee_file)
R.utils::gzip(paste0(barro_lee_file),
destname=paste0(barro_lee_file, ".gz"),
overwrite = TRUE)
} else {
barro_lee_raw <- data.table::fread(paste0(barro_lee_file, ".gz"))
}
barro_lee <- barro_lee_raw[!WBcode%in%c("REU", "ROM", "SER"),
.(iso3c=countrycode::countrycode(WBcode,
"wb", "iso3c"),
year=as.double(year),
school_agv_yrs=as.double(yr_sch),
school_share_sec=as.double(lsc),
school_share_ter=as.double(lhc))
][
iso3c %in% countries_considered
]
print("finished.")
# Complexity data==============================================================
print("Complexity data...")
complexity_harvard_url <- "https://intl-atlas-downloads.s3.amazonaws.com/country_sitcproductsection_year.csv.zip"
complexity_harv_file_name <- "data-raw/complexity_harv.csv"
complexity_harv_origin_zip_file <- "country_sitcproductsection_year.csv"
if (!download_data & file.exists(paste0(complexity_harv_file_name, ".gz"))){
complexity_harv <- data.table::fread(
paste0(complexity_harv_file_name, ".gz")
)
} else {
tmp <- tempfile(fileext = ".zip")
download.file(complexity_harvard_url,
tmp,
quiet = FALSE)
unzip(tmp, exdir = "data-raw", files = complexity_harv_origin_zip_file)
file.rename(paste0("data-raw/", complexity_harv_origin_zip_file),
complexity_harv_file_name)
unlink(paste0("data-raw/", complexity_harv_origin_zip_file),
recursive = T)
complexity_harv_raw <- data.table::fread(complexity_harv_file_name)
complexity_harv <- complexity_harv_raw[
!is.na(countrycode::countrycode(location_code, "iso3c", "country.name",
warn = FALSE)),
.(year, hs_eci, hs_coi, sitc_eci, sitc_coi, location_code)]
complexity_harv <- unique(complexity_harv, by = c("year", "location_code"))
data.table::fwrite(x = complexity_harv, file = complexity_harv_file_name)
R.utils::gzip(paste0(complexity_harv_file_name),
destname=paste0(complexity_harv_file_name, ".gz"),
overwrite = TRUE)
}
complexity_mit_url <- "https://atlas.media.mit.edu/en/rankings/country/eci/?download=true&download_all=true"
complexity_mit_country_names_url <- "https://atlas.media.mit.edu/static/db/raw/country_names.tsv.bz2"
complexity_mit_file_name <- "data-raw/complexity_mit.csv"
complexity_mit_origin_zip_file <- "country_sitcproductsection_year.csv"
if (!download_data & file.exists(paste0(complexity_harv_file_name, ".gz"))){
complexity_mit <- data.table::fread(
paste0(complexity_mit_file_name, ".gz")
)
} else {
tmp <- tempfile(fileext = ".csv")
download.file(complexity_mit_url,
tmp,
quiet = FALSE)
complexity_mit_raw <- data.table::fread(tmp)
tmp2 <- tempfile(fileext = ".bz2")
download.file(complexity_mit_country_names_url,
tmp2,
quiet = FALSE)
complexity_mit_country_names <- data.table::fread(tmp2)
complexity_mit <- data.table::copy(complexity_mit_raw)
complexity_mit[, iso3c:=toupper(countrycode::countrycode(
Country, "name", "id_3char",
custom_dict = as.data.frame(complexity_mit_country_names)))
][, c("Country", "Country ID"):=NULL]
data.table::fwrite(x = complexity_mit, file = complexity_mit_file_name)
R.utils::gzip(paste0(complexity_mit_file_name),
destname=paste0(complexity_mit_file_name, ".gz"),
overwrite = TRUE)
}
complexity_data <- data.table::as.data.table(
dplyr::full_join(
complexity_mit[iso3c %in% countries_considered],
complexity_harv[location_code %in% countries_considered],
by = c("Year"="year", "iso3c" = "location_code")
)
)
data.table::setnames(complexity_data,
old = c("Year", "ECI", "ECI+", "iso3c", "hs_eci",
"hs_coi", "sitc_eci", "sitc_coi"),
new = c("year", "eci_mit", "eci_mit_plus", "iso3c",
"eci_harv_hs", "eci_harc_coi_hs",
"eci_harv_sitc", "eci_harc_coi_sitc"))
print("finished.")
# # Get export data from MIT===================================================
# # https://atlas.media.mit.edu/en/resources/data/
# if (download_data_exports_mit==TRUE){
#   export_data_mit_file_name <- "data/mit_export_data.fst" # TODO in zip ändern
#   if (update_data){
#     web_link_mit <- "https://atlas.media.mit.edu/static/db/raw/year_origin_sitc_rev2.tsv.bz2"
#     web_link_countries <- "https://atlas.media.mit.edu/static/db/raw/country_names.tsv.bz2"
#     mit_country_names <- as.data.frame(fread(web_link_countries))
#     export_data_raw <- fread(web_link_mit,
#                              colClasses = c("double", rep("character", 2),
#                                             rep("double", 4)),
#                              select = c("year", "origin", "sitc",
#                                         "export_val"))
#     export_data_raw[, location_code:=countrycode(
#       countrycode(origin, "id_3char", "name",
#                   custom_dict = mit_country_names),
#       "country.name", "iso3c")] # TODO Fix location code
#     export_data_raw <- export_data_raw[location_code %in% countrycode(
#       countries_considered, "iso2c", "iso3c"),
#       .(year, export_value=export_val, location_code, sitc_product_code=sitc)]
#     fst::write.fst(x = export_data_raw,
#                    path = export_data_mit_file_name, compress = 100)
#   } else{
#     export_data_raw <- fst::read.fst(export_data_mit_file_name,
#                                      as.data.table = T)
#   }
# }
#
# # Get export data from Harvard=================================================
# # http://atlas.cid.harvard.edu/downloads
# if (download_data_exports_harv==TRUE){
#   export_data_file_name <- "data/hrvd_complexity_atlas.fst" # TODO in zip umwandeln
#   if (update_data){
#     web_link <- "https://intl-atlas-downloads.s3.amazonaws.com/country_sitcproduct4digit_year.csv.zip"
#     export_data_raw <- fread(cmd = paste0("curl ", web_link, " | funzip"),
#                              colClasses = c(rep("double", 11),
#                                             rep("character", 4)),
#                              select = c("year", "export_value",
#                                         "location_code", "sitc_product_code"))
#     export_data_raw <- export_data_raw[location_code%in%countrycode(
#       countries_considered, "iso2c", "iso3c")]
#     fst::write.fst(x = export_data_raw,
#                    path = export_data_file_name, compress = 100)
#   } else{
#     export_data_raw <- fst::read.fst(export_data_file_name,
#                                      as.data.table = T)
#   }
# }
# export_data_raw[, year:=as.double(year)
#                 ][, export_value:=as.double(export_value)
#                   ][, total_exports:=sum(export_value, na.rm = T),
#                     .(location_code, year)]
# TODO Das noch kombinieren und Exportdatan separat speichern
# weiter unten dann nur Komplexitätswerte nehmen
# Die aber vielleicht sowieso immer erheben
# Merge data===================================================================
# TODO Testen ob es keine Dopplungen gibt
print("Merging data...")
macro_data <- Reduce(function(...) merge(..., all=TRUE,
by = c("iso3c", "year")),
list(wb_data, swiid_raw, ameco_full, oecd_data, lmf,
complexity_data, barro_lee, kof, chinn_ito)
)
save(macro_data, file = "data/macro_data.rdata")
macro_data_csv_name <- "data/macro_data.csv"
data.table::fwrite(macro_data, file = macro_data_csv_name)
R.utils::gzip(paste0(macro_data_csv_name),
destname=paste0(macro_data_csv_name, ".gz"),
overwrite = TRUE)
print("finished.")
names(macro_data)
sort(names(macro_data))
macro_data$labor_force_total
library(MacroDataR)
